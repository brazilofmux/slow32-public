//===-- SLOW32Subtarget.h - Define Subtarget for SLOW32 -------*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_SLOW32_SLOW32SUBTARGET_H
#define LLVM_LIB_TARGET_SLOW32_SLOW32SUBTARGET_H

#include "SLOW32FrameLowering.h"
#include "SLOW32ISelLowering.h"
#include "SLOW32InstrInfo.h"
#include "SLOW32RegisterInfo.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"

#define GET_SUBTARGETINFO_HEADER
#include "SLOW32GenSubtargetInfo.inc"

namespace llvm {
class StringRef;
class TargetMachine;

class SLOW32Subtarget : public SLOW32GenSubtargetInfo {
  SLOW32FrameLowering FrameLowering;
  SLOW32InstrInfo InstrInfo;
  SLOW32RegisterInfo RegInfo;
  SLOW32TargetLowering TLInfo;
  SelectionDAGTargetInfo TSInfo;

  // Subtarget features
  bool HasStdExtI = true;  // Base integer instructions (always enabled)
  bool HasStdExtM = false; // Multiply/divide instructions
  bool HasStdExtF = false; // Floating-point instructions
  bool HasStdExtA = false; // Atomic instructions
  bool HasStdExtC = false; // Compressed instructions
  
  // Performance features
  bool HasFastMul = false;
  bool HasFastDiv = false;
  bool HasMisalignedAccess = false;
  bool HasBranchPredictor = false;
  bool HasReturnStack = false;
  
  // Tuning features
  bool OptimizeForSize = false;
  bool PreferImmediate = false;
  bool FuseShiftMask = false;

public:
  SLOW32Subtarget(const Triple &TT, StringRef CPU, StringRef FS,
                  const TargetMachine &TM);

  const SLOW32FrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }
  const SLOW32InstrInfo *getInstrInfo() const override { return &InstrInfo; }
  const SLOW32RegisterInfo *getRegisterInfo() const override {
    return &RegInfo;
  }
  const SLOW32TargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }
  const SelectionDAGTargetInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }
  
  // ParseSubtargetFeatures - generated by tablegen
  void ParseSubtargetFeatures(StringRef CPU, StringRef TuneCPU, StringRef FS);
  
  // Subtarget feature getters
  bool hasStdExtI() const { return HasStdExtI; }
  bool hasStdExtM() const { return HasStdExtM; }
  bool hasStdExtF() const { return HasStdExtF; }
  bool hasStdExtA() const { return HasStdExtA; }
  bool hasStdExtC() const { return HasStdExtC; }
  
  bool hasFastMul() const { return HasFastMul; }
  bool hasFastDiv() const { return HasFastDiv; }
  bool hasMisalignedAccess() const { return HasMisalignedAccess; }
  bool hasBranchPredictor() const { return HasBranchPredictor; }
  bool hasReturnStack() const { return HasReturnStack; }
  
  bool shouldOptimizeForSize() const { return OptimizeForSize; }
  bool shouldPreferImmediate() const { return PreferImmediate; }
  bool shouldFuseShiftMask() const { return FuseShiftMask; }
};
} // end namespace llvm

#endif