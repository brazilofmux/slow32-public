# LLVM Integration Patch for SLOW-32
# Apply with: patch -p1 < llvm-integration-examples.patch
# From the llvm-project root directory

# ============================================================================
# File: llvm/CMakeLists.txt
# Location: Around line 450, in the LLVM_ALL_TARGETS list
# Add SLOW32 alphabetically between RISCV and Sparc
# ============================================================================

--- a/llvm/CMakeLists.txt
+++ b/llvm/CMakeLists.txt
@@ -447,11 +447,12 @@ set(LLVM_ALL_TARGETS
   Mips
   MSP430
   NVPTX
   PowerPC
   RISCV
+  SLOW32
   Sparc
   SystemZ
   VE
   WebAssembly
   X86
   XCore

# ============================================================================
# File: llvm/lib/Target/CMakeLists.txt  
# Location: Around line 20, alphabetically in subdirectory list
# ============================================================================

--- a/llvm/lib/Target/CMakeLists.txt
+++ b/llvm/lib/Target/CMakeLists.txt
@@ -17,11 +17,12 @@ add_subdirectory(Mips)
 add_subdirectory(MSP430)
 add_subdirectory(NVPTX)
 add_subdirectory(PowerPC)
 add_subdirectory(RISCV)
+add_subdirectory(SLOW32)
 add_subdirectory(Sparc)
 add_subdirectory(SystemZ)
 add_subdirectory(VE)
 add_subdirectory(WebAssembly)
 add_subdirectory(X86)
 add_subdirectory(XCore)

# ============================================================================
# File: llvm/lib/Support/Triple.cpp
# Multiple locations - shown with context
# ============================================================================

--- a/llvm/lib/Support/Triple.cpp
+++ b/llvm/lib/Support/Triple.cpp
@@ -40,16 +40,17 @@ enum ArchType {
   nvptx,          // NVPTX: 32-bit
   nvptx64,        // NVPTX: 64-bit
   le32,           // le32: generic little-endian 32-bit CPU (PNaCl)
   le64,           // le64: generic little-endian 64-bit CPU (PNaCl)
   amdil,          // AMDIL
   amdil64,        // AMDIL with 64-bit pointers
   hsail,          // AMD HSAIL
   hsail64,        // AMD HSAIL with 64-bit pointers
   spir,           // SPIR: standard portable IR for OpenCL 32-bit version
   spir64,         // SPIR: standard portable IR for OpenCL 64-bit version
   spirv,          // SPIR-V with logical memory layout
   spirv32,        // SPIR-V with 32-bit pointers
   spirv64,        // SPIR-V with 64-bit pointers
   kalimba,        // Kalimba: generic kalimba
   shave,          // SHAVE: Movidius vector VLIW processors
   lanai,          // Lanai: Lanai 32-bit
   wasm32,         // WebAssembly with 32-bit pointers
   wasm64,         // WebAssembly with 64-bit pointers
   renderscript32, // 32-bit RenderScript
   renderscript64, // 64-bit RenderScript
   ve,             // NEC SX-Aurora Vector Engine
   // Example context: Add slow32 between shave and sparc
   shave,          // SHAVE: Movidius vector VLIW processors
+  slow32,         // SLOW-32: 32-bit educational RISC
   sparc,          // Sparc: sparc
   sparcv9,        // Sparcv9: Sparcv9
   sparcel,        // Sparc: (endianness = little). NB: 'Sparcle' is a CPU variant
@@ -195,16 +196,17 @@ StringRef Triple::getArchTypeName(ArchType Kind) {
   case renderscript32: return "renderscript32";
   case renderscript64: return "renderscript64";
   case riscv32:        return "riscv32";
   case riscv64:        return "riscv64";
   case shave:          return "shave";
+  case slow32:         return "slow32";
   case sparc:          return "sparc";
   case sparcv9:        return "sparcv9";
   case sparcel:        return "sparcel";
   case systemz:        return "systemz";
@@ -495,16 +497,17 @@ static Triple::ArchType parseArch(StringRef ArchName) {
     .Case("renderscript32", Triple::renderscript32)
     .Case("renderscript64", Triple::renderscript64)
     .Case("shave", Triple::shave)
+    .Case("slow32", Triple::slow32)
     .StartsWith("sparc", Triple::sparc)
     .Case("sparcv9", Triple::sparcv9)
@@ -845,16 +848,17 @@ static unsigned getArchPointerBitWidth(llvm::Triple::ArchType Arch) {
   case llvm::Triple::riscv32:
   case llvm::Triple::shave:
+  case llvm::Triple::slow32:
   case llvm::Triple::sparc:
   case llvm::Triple::sparcel:
@@ -915,16 +919,17 @@ Triple::ObjectFormatType Triple::getDefaultFormat(const Triple &T) {
   case Triple::riscv32:
   case Triple::riscv64:
   case Triple::shave:
+  case Triple::slow32:
   case Triple::sparc:
   case Triple::sparcv9:
   case Triple::sparcel:

# ============================================================================
# File: llvm/include/llvm/BinaryFormat/ELF.h
# Location: Around line 310, in the EM_ machine type definitions
# Add at the end of the official list, before any comments
# ============================================================================

--- a/llvm/include/llvm/BinaryFormat/ELF.h
+++ b/llvm/include/llvm/BinaryFormat/ELF.h
@@ -305,11 +305,14 @@ enum {
   EM_RISCV = 243,       // RISC-V
   EM_LANAI = 244,       // Lanai 32-bit processor
   EM_BPF = 247,         // Linux kernel bpf virtual machine
   EM_VE = 251,          // NEC SX-Aurora VE
   EM_CSKY = 252,        // C-SKY 32-bit processor
   EM_LOONGARCH = 258,   // LoongArch
+  
+  // Unofficial machine types for experimental architectures
+  EM_SLOW32 = 0x5332,   // SLOW-32 32-bit RISC ('S2' in hex)
 
   // EM_CSKY is an official value, but we also support the original value
   // for compatibility reasons.