diff --git a/llvm/include/llvm/TargetParser/Triple.h b/llvm/include/llvm/TargetParser/Triple.h
index f85984ed4..ee893c973 100644
--- a/llvm/include/llvm/TargetParser/Triple.h
+++ b/llvm/include/llvm/TargetParser/Triple.h
@@ -79,6 +79,7 @@ public:
     riscv64,     // RISC-V (64-bit, little endian): riscv64
     riscv32be,   // RISC-V (32-bit, big endian): riscv32be
     riscv64be,   // RISC-V (64-bit, big endian): riscv64be
+    slow32,      // SLOW32: slow32
     sparc,       // Sparc: sparc
     sparcv9,     // Sparcv9: Sparcv9
     sparcel,     // Sparc: (endianness = little). NB: 'Sparcle' is a CPU variant
@@ -1080,6 +1081,9 @@ public:
   /// Tests whether the target is RISC-V (32- and 64-bit).
   bool isRISCV() const { return isRISCV32() || isRISCV64(); }
 
+  /// Tests whether the target is SLOW32.
+  bool isSLOW32() const { return getArch() == Triple::slow32; }
+
   /// Tests whether the target is 32-bit SPARC (little and big endian).
   bool isSPARC32() const {
     return getArch() == Triple::sparc || getArch() == Triple::sparcel;
diff --git a/llvm/lib/TargetParser/Triple.cpp b/llvm/lib/TargetParser/Triple.cpp
index ec15f235b..d4fc71481 100644
--- a/llvm/lib/TargetParser/Triple.cpp
+++ b/llvm/lib/TargetParser/Triple.cpp
@@ -67,6 +67,7 @@ StringRef Triple::getArchTypeName(ArchType Kind) {
     return "riscv32be";
   case riscv64be:
     return "riscv64be";
+  case slow32:         return "slow32";
   case shave:          return "shave";
   case sparc:          return "sparc";
   case sparcel:        return "sparcel";
@@ -464,6 +465,7 @@ Triple::ArchType Triple::getArchTypeForLLVMName(StringRef Name) {
       .Case("amdgcn", amdgcn)
       .Case("riscv32", riscv32)
       .Case("riscv64", riscv64)
+      .Case("slow32", slow32)
       .Case("riscv32be", riscv32be)
       .Case("riscv64be", riscv64be)
       .Case("hexagon", hexagon)
@@ -611,6 +613,7 @@ static Triple::ArchType parseArch(StringRef ArchName) {
                 .Case("amdgcn", Triple::amdgcn)
                 .Case("riscv32", Triple::riscv32)
                 .Case("riscv64", Triple::riscv64)
+                .Case("slow32", Triple::slow32)
                 .Case("riscv32be", Triple::riscv32be)
                 .Case("riscv64be", Triple::riscv64be)
                 .Case("hexagon", Triple::hexagon)
@@ -987,6 +990,7 @@ static Triple::ObjectFormatType getDefaultFormat(const Triple &T) {
   case Triple::riscv32be:
   case Triple::riscv64be:
   case Triple::shave:
+  case Triple::slow32:
   case Triple::sparc:
   case Triple::sparcel:
   case Triple::sparcv9:
@@ -1710,6 +1714,7 @@ unsigned Triple::getArchPointerBitWidth(llvm::Triple::ArchType Arch) {
   case llvm::Triple::riscv32:
   case llvm::Triple::riscv32be:
   case llvm::Triple::shave:
+  case llvm::Triple::slow32:
   case llvm::Triple::sparc:
   case llvm::Triple::sparcel:
   case llvm::Triple::spir:
@@ -1820,6 +1825,7 @@ Triple Triple::get32BitArchVariant() const {
   case Triple::riscv32:
   case Triple::riscv32be:
   case Triple::shave:
+  case Triple::slow32:
   case Triple::sparc:
   case Triple::sparcel:
   case Triple::spir:
@@ -1881,6 +1887,7 @@ Triple Triple::get64BitArchVariant() const {
   case Triple::msp430:
   case Triple::r600:
   case Triple::shave:
+  case Triple::slow32:
   case Triple::sparcel:
   case Triple::tce:
   case Triple::tcele:
@@ -1974,6 +1981,7 @@ Triple Triple::getBigEndianArchVariant() const {
   case Triple::renderscript32:
   case Triple::renderscript64:
   case Triple::shave:
+  case Triple::slow32:
   case Triple::spir64:
   case Triple::spir:
   case Triple::spirv:
@@ -2093,6 +2101,7 @@ bool Triple::isLittleEndian() const {
   case Triple::riscv32:
   case Triple::riscv64:
   case Triple::shave:
+  case Triple::slow32:
   case Triple::sparcel:
   case Triple::spir64:
   case Triple::spir:
