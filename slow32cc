#!/bin/bash

# SLOW-32 C Compiler Driver
# Usage: slow32cc [options] source.c -o output.bin
#
# A complete compilation driver that handles the entire pipeline:
#   C → LLVM IR → SLOW-32 Assembly → Binary

VERSION="1.1.0"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Default values
OPTIMIZATION="-O1"
OUTPUT_FILE=""
INPUT_FILE=""
KEEP_INTERMEDIATES=0
VERBOSE=0
EMIT_ASM=0
EMIT_LLVM=0
LIBC_VARIANT="${LIBC:-debug}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

usage() {
    cat << EOF
SLOW-32 C Compiler Driver v$VERSION

Usage: $0 [options] source.c -o output

Options:
    -o <file>       Output binary file (required)
    -O<level>       Optimization level (0, 1, 2, s, z) [default: 1]
    -S              Emit assembly only, don't assemble to binary
    -emit-llvm      Emit LLVM IR only, don't compile further
    --libc=<name>   Select runtime libc (debug|mmio) [default: debug]
    -k, --keep      Keep intermediate files (.ll, .s)
    -v, --verbose   Verbose output
    -h, --help      Show this help message
    --version       Show version information

Examples:
    $0 hello.c -o hello.bin           # Basic compilation
    $0 -O2 program.c -o program.bin   # With optimization
    $0 -S program.c -o program.s      # Assembly output only
    $0 -k -v test.c -o test.bin       # Keep intermediates, verbose

Environment:
    LLVM_BIN        Root of the LLVM toolchain (defaults to ~/llvm-project/build/bin)
    SLOW32_CLANG    Override clang path
    SLOW32_LLC      Override llc path
    SLOW32_OPT      Additional clang options

EOF
    exit 1
}

error() {
    echo -e "${RED}Error:${NC} $1" >&2
    exit 1
}

info() {
    if [ $VERBOSE -eq 1 ]; then
        echo -e "${GREEN}[INFO]${NC} $1" >&2
    fi
}

warning() {
    echo -e "${YELLOW}Warning:${NC} $1" >&2
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -o)
            OUTPUT_FILE="$2"
            shift 2
            ;;
        -O*)
            OPTIMIZATION="$1"
            shift
            ;;
        -S)
            EMIT_ASM=1
            shift
            ;;
        -emit-llvm)
            EMIT_LLVM=1
            shift
            ;;
        --libc=*)
            LIBC_VARIANT="${1#*=}"
            shift
            ;;
        -k|--keep)
            KEEP_INTERMEDIATES=1
            shift
            ;;
        -v|--verbose)
            VERBOSE=1
            shift
            ;;
        -h|--help)
            usage
            ;;
        --version)
            echo "slow32cc version $VERSION"
            exit 0
            ;;
        -*)
            error "Unknown option: $1"
            ;;
        *)
            if [ -z "$INPUT_FILE" ]; then
                INPUT_FILE="$1"
            else
                error "Multiple input files not supported"
            fi
            shift
            ;;
    esac
done

# Validate arguments
if [ -z "$INPUT_FILE" ]; then
    error "No input file specified"
fi

if [ ! -f "$INPUT_FILE" ]; then
    error "Input file not found: $INPUT_FILE"
fi

if [ -z "$OUTPUT_FILE" ]; then
    error "No output file specified (use -o)"
fi

# Determine file paths
BASE_NAME=$(basename "$INPUT_FILE" .c)
DIR_NAME=$(dirname "$OUTPUT_FILE")
TEMP_DIR="${TMPDIR:-/tmp}/slow32cc_$$"

# Create temp directory
mkdir -p "$TEMP_DIR" || error "Failed to create temp directory"
trap "[ $KEEP_INTERMEDIATES -eq 0 ] && rm -rf '$TEMP_DIR'" EXIT

# Ensure output directory exists (no-op for current directory)
mkdir -p "$DIR_NAME" 2>/dev/null || true

# Check for required tools
LLVM_BIN_DEFAULT="$HOME/llvm-project/build/bin"
LLVM_BIN_ROOT="${LLVM_BIN:-$LLVM_BIN_DEFAULT}"

resolve_tool() {
    local override="$1"
    local preferred="$2"
    local fallback="$3"

    if [ -n "$override" ]; then
        echo "$override"
        return
    fi

    if [ -n "$preferred" ] && [ -x "$preferred" ]; then
        echo "$preferred"
        return
    fi

    if command -v "$fallback" >/dev/null 2>&1; then
        command -v "$fallback"
        return
    fi

    echo ""
}

CLANG_BIN=$(resolve_tool "$SLOW32_CLANG" "$LLVM_BIN_ROOT/clang" "clang")
if [ -z "$CLANG_BIN" ]; then
    error "Unable to locate clang. Build LLVM or set LLVM_BIN/SLOW32_CLANG."
fi

LLC_BIN=$(resolve_tool "$SLOW32_LLC" "$LLVM_BIN_ROOT/llc" "llc")
if [ -z "$LLC_BIN" ]; then
    error "Unable to locate llc. Build LLVM or set LLVM_BIN/SLOW32_LLC."
fi

ASSEMBLER="$SCRIPT_DIR/tools/assembler/slow32asm"
if [ ! -x "$ASSEMBLER" ]; then
    error "SLOW-32 assembler not found or not executable: $ASSEMBLER"
fi

LINKER="$SCRIPT_DIR/tools/linker/s32-ld"
if [ ! -x "$LINKER" ]; then
    error "SLOW-32 linker not found or not executable: $LINKER"
fi

# Step 1: Compile C to LLVM IR
LLVM_FILE="$TEMP_DIR/$BASE_NAME.ll"
info "Compiling C to LLVM IR ($CLANG_BIN)..."

"$CLANG_BIN" -target slow32-unknown-none -S -emit-llvm $OPTIMIZATION $SLOW32_OPT \
    -I"$SCRIPT_DIR/runtime/include" \
    "$INPUT_FILE" -o "$LLVM_FILE" || {
    error "Failed to compile C to LLVM IR"
}

if [ $EMIT_LLVM -eq 1 ]; then
    cp "$LLVM_FILE" "$OUTPUT_FILE"
    info "LLVM IR written to $OUTPUT_FILE"
    exit 0
fi

# Step 2: Compile LLVM IR to SLOW-32 Assembly
ASM_FILE="$TEMP_DIR/$BASE_NAME.s"
info "Lowering LLVM IR with $LLC_BIN..."

"$LLC_BIN" -mtriple=slow32-unknown-none "$LLVM_FILE" -o "$ASM_FILE" \
    2>"$TEMP_DIR/llc.err" || {
    cat "$TEMP_DIR/llc.err" >&2
    error "Failed to compile LLVM IR to SLOW-32 assembly"
}

if [ -s "$TEMP_DIR/llc.err" ] && [ $VERBOSE -eq 1 ]; then
    warning "llc emitted warnings:"
    cat "$TEMP_DIR/llc.err" >&2
fi

if [ $EMIT_ASM -eq 1 ]; then
    cp "$ASM_FILE" "$OUTPUT_FILE"
    info "Assembly written to $OUTPUT_FILE"
    exit 0
fi

# Step 3: Assemble to object
OBJ_FILE="$TEMP_DIR/$BASE_NAME.s32o"
info "Assembling with slow32asm..."

"$ASSEMBLER" "$ASM_FILE" "$OBJ_FILE" 2>"$TEMP_DIR/assembler.err" || {
    cat "$TEMP_DIR/assembler.err" >&2
    error "Assembly failed"
}

if [ -s "$TEMP_DIR/assembler.err" ] && [ $VERBOSE -eq 1 ]; then
    warning "Assembler warnings:"
    cat "$TEMP_DIR/assembler.err" >&2
fi

# Step 4: Link with runtime libraries
CRT0="$SCRIPT_DIR/runtime/crt0.s32o"
LIBS32="$SCRIPT_DIR/runtime/libs32.s32a"

case "$LIBC_VARIANT" in
    debug)
        LIBC_ARCHIVE="$SCRIPT_DIR/runtime/libc_debug.s32a"
        ;;
    mmio)
        LIBC_ARCHIVE="$SCRIPT_DIR/runtime/libc_mmio.s32a"
        ;;
    *)
        error "Unsupported libc variant: $LIBC_VARIANT"
        ;;
esac

for dep in "$CRT0" "$LIBC_ARCHIVE" "$LIBS32"; do
    if [ ! -f "$dep" ]; then
        error "Missing runtime artifact: $dep (run 'make runtime')"
    fi
done

info "Linking final binary..."

"$LINKER" -o "$OUTPUT_FILE" "$CRT0" "$OBJ_FILE" "$LIBC_ARCHIVE" "$LIBS32" \
    2>"$TEMP_DIR/link.err" || {
    cat "$TEMP_DIR/link.err" >&2
    error "Linking failed"
}

if [ -s "$TEMP_DIR/link.err" ] && [ $VERBOSE -eq 1 ]; then
    warning "Linker warnings:"
    cat "$TEMP_DIR/link.err" >&2
fi

# Keep intermediate files if requested
if [ $KEEP_INTERMEDIATES -eq 1 ]; then
    cp "$LLVM_FILE" "$DIR_NAME/$BASE_NAME.ll"
    cp "$ASM_FILE" "$DIR_NAME/$BASE_NAME.s"
    info "Intermediate files saved:"
    info "  LLVM IR: $DIR_NAME/$BASE_NAME.ll"
    info "  Assembly: $DIR_NAME/$BASE_NAME.s"
fi

# Success!
if [ $VERBOSE -eq 1 ]; then
    SIZE=$(stat -c%s "$OUTPUT_FILE" 2>/dev/null || stat -f%z "$OUTPUT_FILE" 2>/dev/null)
    echo -e "${GREEN}Success!${NC} Binary written to $OUTPUT_FILE ($SIZE bytes)"
else
    echo "$OUTPUT_FILE"
fi
